{
  "name": "Synology",
  "tagline": "",
  "body": "# Synology #\r\n\r\n[![Stories in Ready](https://badge.waffle.io/Ar3sDevelopment/Synology.png?label=ready&title=Ready)](http://waffle.io/Ar3sDevelopment/Synology)\r\n\r\n[![Stories in Progress](https://badge.waffle.io/Ar3sDevelopment/Synology.svg?label=in%20progress&title=In%20Progress)](http://waffle.io/Ar3sDevelopment/Synology)\r\n\r\nThis is an implementation of Synology APIs for .NET projects.\r\n\r\n## Pull request will be accepted only if targeting `dev` branch. ##\r\n\r\nThe following code is my test project, you can use it as a guide for now. I will write the documentation, I promise.\r\n\r\n```csharp\r\npublic static void Main(string[] args)\r\n{\r\n\tusing (var syno = new SynologyConnection(LoginData.Url, true))\r\n\t{\r\n\t\tDoConnection(syno);\r\n\t}\r\n}\r\npublic static void DownloadStationTests(SynologyConnection syno)\r\n{\r\n\tConsole.WriteLine(\"DS Info\");\r\n\tvar dsResInfo = syno.DownloadStation().Info().GetInfo();\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(dsResInfo));\r\n\r\n\tConsole.WriteLine(\"DS Config\");\r\n\tvar dsResConfig = syno.DownloadStation().Info().Config();\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(dsResConfig));\r\n\r\n\tConsole.WriteLine(\"DS Schedule Config\");\r\n\tvar dsResSchedule = syno.DownloadStation().Schedule().Config();\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(dsResSchedule));\r\n\r\n\tConsole.WriteLine(\"DS Task List\");\r\n\tvar dsResTasks = syno.DownloadStation().Task().List(new TaskListParameters {\r\n\t\tAdditional = TaskDetailsType.Detail | TaskDetailsType.Transfer | TaskDetailsType.File | TaskDetailsType.Tracker | TaskDetailsType.Peer\t\r\n\t});\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(dsResTasks));\r\n}\r\n\r\npublic static void FileStationTests(SynologyConnection syno)\r\n{\r\n\tConsole.WriteLine(\"FS Info\");\r\n\tvar fsResInfo = syno.FileStation().Info().GetInfo();\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(fsResInfo));\r\n\r\n\tConsole.WriteLine(\"FS List Share\");\r\n\tvar fsResShares = syno.FileStation().FileShare().ListShare(FileShareDetailsType.RealPath | FileShareDetailsType.Size | FileShareDetailsType.Owner | FileShareDetailsType.Time | FileShareDetailsType.Perm | FileShareDetailsType.VolumeStatus | FileShareDetailsType.MountPointType);\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(fsResShares));\r\n\r\n\tConsole.WriteLine(\"FS List\");\r\n\tvar fsResList = syno.FileStation().FileShare().List(\"/downloads\", null, FileType.All, null, FileDetailsType.RealPath | FileDetailsType.Size | FileDetailsType.Owner | FileDetailsType.Time | FileDetailsType.Perm | FileDetailsType.Type | FileDetailsType.MountPointType);\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(fsResList));\r\n\r\n\tConsole.WriteLine(\"FS Info\");\r\n\tvar fsResFileInfo = syno.FileStation().FileShare().Info(\"/downloads/.apdisk\", FileDetailsType.RealPath | FileDetailsType.Size | FileDetailsType.Owner | FileDetailsType.Time | FileDetailsType.Perm | FileDetailsType.Type | FileDetailsType.MountPointType);\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(fsResFileInfo));\r\n\r\n\tConsole.WriteLine(\"FS VF List\");\r\n\tvar fsVfResList = syno.FileStation().VirtualFolder().List(VirtualFolderDetailsType.RealPath | VirtualFolderDetailsType.Owner | VirtualFolderDetailsType.Time | VirtualFolderDetailsType.Perm | VirtualFolderDetailsType.MountPointType | VirtualFolderDetailsType.VolumeStatus);\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(fsVfResList));\r\n}\r\n\r\npublic static void GetOtp(SynologyConnection syno, ref ResultData<AuthResult> resLogin)\r\n{\r\n\tdo\r\n\t{\r\n\t\tConsole.Write(\"Otp Code: \");\r\n\r\n\t\tvar otp = Console.ReadLine();\r\n\r\n\t\tif (string.IsNullOrWhiteSpace(otp))\r\n\t\t{\r\n\t\t\tresLogin.Error = new ResultError { Code = 404 };\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tresLogin = syno.Api().Auth().Login(new LoginParameters {\r\n\t\t\tUsername = LoginData.Username,\r\n\t\t\tPassword = LoginData.Password,\r\n\t\t\tOtpCode = otp\r\n\t\t});\r\n\r\n\t\tConsole.WriteLine(JsonConvert.SerializeObject(resLogin));\r\n\t}\r\n\twhile (resLogin.Error != null && resLogin.Error.Code == 404);\r\n}\r\n\r\npublic static void DoConnection(SynologyConnection syno)\r\n{\r\n\tConsole.WriteLine(\"Info\");\r\n\tvar resInfo = syno.Api().Info().GetInfo();\r\n\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(resInfo));\r\n\r\n\tConsole.WriteLine(\"Auth Login\");\r\n\tvar resLogin = syno.Api().Auth().Login(new LoginParameters {\r\n\t\tUsername = LoginData.Username,\r\n\t\tPassword = LoginData.Password\r\n\t});\r\n\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(resLogin));\r\n\r\n\tif (resLogin.Error == null || (resLogin.Error != null && resLogin.Error.Code == 403))\r\n\t{\r\n\t\tif (resLogin.Error != null && resLogin.Error.Code == 403)\r\n\t\t{\r\n\t\t\tGetOtp(syno, ref resLogin);\r\n\t\t}\r\n\r\n\t\tif (resLogin.Error == null)\r\n\t\t{\r\n\t\t\tDownloadStationTests(syno);\r\n\r\n\t\t\tFileStationTests(syno);\r\n\r\n\t\t\tConsole.WriteLine(\"Auth Logout\");\r\n\t\t\tvar resLogout = syno.Api().Auth().Logout();\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(resLogout));\r\n\t\t}\r\n\t}\r\n\r\n\tConsole.ReadLine();\r\n}\r\n```\r\n",
  "google": "UA-57981518-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}